#include <iostream>
#include <vector>
#include <stdexcept>

// Custom exception for dimension mismatch
class DimensionMismatchException : public std::exception {
public:
    const char* what() const noexcept override {
        return "Matrix dimensions do not match for this operation.";
    }
};

// Generic Matrix template class
template <typename T>
class Matrix {
private:
    std::vector<std::vector<T>> data;
    size_t rows, cols;

public:
    // Constructor
    Matrix(size_t r, size_t c, const T& initVal = T()) : rows(r), cols(c), data(r, std::vector<T>(c, initVal)) {}

    // Get number of rows
    size_t rowCount() const { return rows; }

    // Get number of columns
    size_t colCount() const { return cols; }

    // Bounds-checked element access
    T& at(size_t i, size_t j) {
        if (i >= rows || j >= cols) throw std::out_of_range("Index out of range");
        return data[i][j];
    }

    const T& at(size_t i, size_t j) const {
        if (i >= rows || j >= cols) throw std::out_of_range("Index out of range");
        return data[i][j];
    }

    // Operator+ : Matrix addition
    Matrix<T> operator+(const Matrix<T>& other) const {
        if (rows != other.rows || cols != other.cols)
            throw DimensionMismatchException();

        Matrix<T> result(rows, cols);
        for (size_t i = 0; i < rows; ++i)
            for (size_t j = 0; j < cols; ++j)
                result.data[i][j] = data[i][j] + other.data[i][j];
        return result;
    }

    // Operator* : Matrix multiplication
    Matrix<T> operator*(const Matrix<T>& other) const {
        if (cols != other.rows)
            throw DimensionMismatchException();

        Matrix<T> result(rows, other.cols, T());
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < other.cols; ++j) {
                for (size_t k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    // Print matrix
    void print() const {
        for (const auto& row : data) {
            for (const auto& val : row) {
                std::cout << val << " ";
            }
            std::cout << '\n';
        }
    }
};

// Main function to demonstrate Matrix operations
int main() {
    try {
        // Create two 2x2 matrices
        Matrix<int> A(2, 2);
        Matrix<int> B(2, 2);

        // Initialize A
        A.at(0, 0) = 1; A.at(0, 1) = 2;
        A.at(1, 0) = 3; A.at(1, 1) = 4;

        // Initialize B
        B.at(0, 0) = 5; B.at(0, 1) = 6;
        B.at(1, 0) = 7; B.at(1, 1) = 8;

        // Add matrices
        Matrix<int> C = A + B;
        std::cout << "Matrix A + B:\n";
        C.print();

        // Multiply matrices
        Matrix<int> D = A * B;
        std::cout << "Matrix A * B:\n";
        D.print();

        // Try accessing out of bounds
        std::cout << "Trying out-of-bounds access:\n";
        std::cout << A.at(3, 3); // This will throw

    } catch (const DimensionMismatchException& e) {
        std::cerr << "Dimension error: " << e.what() << '\n';
    } catch (const std::out_of_range& e) {
        std::cerr << "Out-of-range error: " << e.what() << '\n';
    } catch (const std::exception& e) {
        std::cerr << "General exception: " << e.what() << '\n';
    }

    return 0;
}
